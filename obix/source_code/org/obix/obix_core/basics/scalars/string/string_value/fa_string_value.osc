///
   Copyright (C) 2009-2012 Christian Neumanns (www.rps-obix.com)
   This code can be used under the terms of the 'GNU Afero General Public License version 3'
   The full text of this license can be found at http://www.gnu.org/licenses/agpl.html
   THIS CODE IS DISTRIBUTED WITHOUT ANY WARRANTY. See the license for details.
end ///

factory string_value type:string_value

	java_header
		import java.util.regex.Pattern;
		import java.util.regex.Matcher;
		
		import org.obix.obix_core.basics.scalars.number.integer.integer32.fa_signed_integer32;
	end java_header

	java
		private String java_value ;

		public String java_value() { return java_value; }

		public fa_string_value ( String i_java_value ) {
			if (i_java_value == null) {
				throw new RuntimeException ("new fa_string_value(): i_java_value is null");
			}

			this.java_value = i_java_value ;
		}

		private static String _repeat ( String string, int count ) {
			StringBuilder b = new StringBuilder();
			for ( int i = 1; i <= count; i++) b.append ( string );
			return b.toString();
		}
	end java

	attribute is_empty
		get
			script
				java
					o_is_empty = (java_value.length() == 0) ? fa_yes_no.a_yes : fa_yes_no.a_no ;
				end java
			end
		end
	end

	attribute item_count
		get
			script
				java
					o_item_count = new fa_zero_positive32 ( java_value.length() ) ;
				end java
			end
		end
	end

	attribute hash_code
		get
			script
				java
					o_hash_code = new fa_signed_integer32 ( java_value.hashCode() );
				end java
			end
		end
	end

	command to_string
		script
			java
				o_result = new fa_string ( java_value ) ;
			end java
		end
	end

	
	// extended_comparable

	command is_equal_to
		script
			java
				if ( this == i_other ) {
					o_result = fa_yes_no.a_yes ;
				}
				else {
					o_result = (this.java_value.equals ( i_other.java_value() )) ? fa_yes_no.a_yes : fa_yes_no.a_no ;
				}
			end java
		end
	end

	command compare_to
		script
			java
				if ( i_other == this ) {
					o_result = se_any_type.en_comparator_result_equal ;
				}
				else {
					int v_result = this.java_value.compareTo ( i_other.java_value() ) ;
					o_result = ( v_result <= -1 ? se_any_type.en_comparator_result_less : ( v_result == 0 ? se_any_type.en_comparator_result_equal : se_any_type.en_comparator_result_greater ) ) ;
				}
			end java
		end
	end

	command min
		script
			java
				if ( i_other == this ) {
					o_result = this ;
				}
				else {
					o_result = (this.java_value.compareTo ( i_other.java_value() ) != 1 ) ? this : i_other ;
				}
			end java
		end
	end

	command max
		script
			java
				if ( i_other == this ) {
					o_result = this ;
				}
				else {
					o_result = (this.java_value.compareTo ( i_other.java_value() ) != -1 ) ? this : i_other ;
				}
			end java
		end
	end

	command is_between
		script
			java
				if ( this == i_min || this == i_max ) {
					o_result = fa_yes_no.a_yes ;
				}
				else {
					o_result = ((this.java_value.compareTo(i_min.java_value()) != -1) && 
					(this.java_value.compareTo(i_max.java_value()) != 1)) ? fa_yes_no.a_yes : fa_yes_no.a_no ;
				}
			end java
		end
	end

	
	// indexed_list

	command item_iterator
		script
			o_result = fa_string_value_iterator.co_create ( this )
		end
	end

	command first_item
		script
			java
				o_result = new fa_character ( java_value.charAt ( 0 ) ) ;
			end java
		end
	end

	command last_item
		script
			java
				o_result = new fa_character ( java_value.charAt ( java_value.length() - 1 ) ) ;
			end java
		end
	end

	command item_at_index
		script
			java
				o_result = new fa_character ( java_value.charAt ( i_index.getValue().java_value() - 1 ) ) ;
			end java
		end
	end

	
	// extract

	command extract_from

		script
			java
				o_result = new fa_string_value ( java_value.substring ( i_from.getValue().java_value() - 1 ) ) ;
			end java
		end

		test
			script
				java
					v_test_object_ = new fa_string_value ( "abc" );
				end java
		
				test i_from = 1
				verify v_result compare =v "abc"~

				test i_from = 2
				verify v_result compare =v "bc"~

				test i_from = 3
				verify v_result compare =v "c"~

				test i_from = 4
				verify error
			end
		end
	end

	command extract_to
		script
			java
				o_result = new fa_string_value ( java_value.substring ( 0, i_to.getValue().java_value() ) ) ;
			end java
		end
		
		test
			script
				java
					v_test_object_ = new fa_string_value ( "abc" );
				end java

				test 1
				verify v_result compare =v "a"~

				test 2
				verify v_result compare =v "ab"~

				test 3
				verify v_result compare =v "abc"~

				test 4
				verify error
			end
		end
	end

	command extract_from_to

		script
			java
				o_result = new fa_string_value ( java_value.substring ( i_from.getValue().java_value() - 1, i_to.getValue().java_value() ) ) ;
			end java
		end

		test
			script
				java
					v_test_object_ = new fa_string_value ( "abc" );
				end java
		
				test from = 1 to = 1
				verify v_result compare =v "a"~

				test from = 1 to = 2
				verify v_result compare =v "ab"~

				test from = 1 to = 3
				verify v_result compare =v "abc"~

				test from = 2 to = 3
				verify v_result compare =v "bc"~

				test from = 3 to = 3
				verify v_result compare =v "c"~

				test from = 4 to = 3
				verify error

				test from = 1 to = 4
				verify error

				test from = 2 to = 1
				verify error
			end
		end test
	end
	

	// find

	command find
		script
			java
				int v_index = java_value.indexOf ( i_to_find.java_value() ) ;
				o_result = v_index > -1 ? new fa_positive32 ( v_index + 1 ) : null ;
			end java
		end
	end

	command find_from
		script
			java
				int v_index = java_value.indexOf ( i_to_find.java_value(), i_from.getValue().java_value() - 1 ) ;
				o_result = v_index > -1 ? new fa_positive32 ( v_index + 1 ) : null ;
			end java
		end
	end

	command find_last
		script
			java
				int v_index = java_value.lastIndexOf ( i_to_find.java_value() ) ;
				o_result = v_index > -1 ? new fa_positive32 ( v_index + 1 ) : null ;
			end java
		end
	end
	
	command find_regex
		script
			java
				Pattern pattern = i_regex.java_pattern();
				Matcher matcher = pattern.matcher(java_value);

				if ( matcher.find() ) {
					o_result = fa_string_find_result.co_create_command ( 
						new fa_positive32(matcher.start()+1), 
						new fa_positive32(matcher.end()), 
						new fa_non_empty_string(matcher.group()) );
				}
			end java
		end
	end

	
	// checks

	command starts_with
		script
			java
				o_result = (this.java_value.startsWith ( i_start.java_value() )) ? fa_yes_no.a_yes : fa_yes_no.a_no ;
			end java
		end
	end

	command ends_with
		script
			java
				o_result = (this.java_value.endsWith ( i_end.java_value() )) ? fa_yes_no.a_yes : fa_yes_no.a_no ;
			end java
		end
	end

	command matches_regex
		script
			java
				Pattern pattern = i_regex.java_pattern();
				Matcher matcher = pattern.matcher(java_value);

				o_result = matcher.matches() ? fa_yes_no.a_yes : fa_yes_no.a_no ;
			end java
		end
	end

	command contains
		script
			java
				int v_index = java_value.indexOf ( i_string.java_value() ) ;
				o_result = v_index > -1 ? fa_yes_no.a_yes : fa_yes_no.a_no ;
			end java
		end
	end
	
	// modifiers

	command append
		script
			java
				o_result = new fa_string_value ( this.java_value + i_string.java_value() ) ;
			end java
		end

		test
			script
				java
					v_test_object_ = new fa_string_value ( "abc" );
				end java

				test i_string = ""~
				verify v_result compare =v "abc"~

				test i_string = "d"~
				verify v_result compare =v "abcd"~

				test i_string = "def"~
				verify v_result compare =v "abcdef"~
			end
		end
	end

	command repeat
		script
			java
				o_result = new fa_string_value ( _repeat ( java_value, i_count.java_value() ) );
			end java
		end

		test
			script
				java
					v_test_object_ = new fa_string_value ( "abc " );
				end java

				test 1
				verify v_result compare =v "abc "~

				test 2
				verify v_result compare =v "abc abc "~

				test 3
				verify v_result compare =v "abc abc abc "~
			end
		end
	end

	command remove_first
		script
			java
				o_result = new fa_string_value ( java_value.substring ( 1 ) ) ;
			end java
		end

		test
			script
				java
					v_test_object_ = new fa_string_value ( "" );
				end java
				test
				verify error

				java
					v_test_object_ = new fa_string_value ( "a" );
				end java
				test
				verify v_result compare =v ""~

				java
					v_test_object_ = new fa_string_value ( "ab" );
				end java
				test
				verify v_result compare =v "b"~

				java
					v_test_object_ = new fa_string_value ( "ABC" );
				end java
				test
				verify v_result compare =v "BC"~
			end
		end
	end

	command remove_last
		script
			java
				o_result = new fa_string_value ( java_value.substring ( 0, java_value.length() - 1 ) ) ;
			end java
		end

		test
			script
				java
					v_test_object_ = new fa_string_value ( "" );
				end java
				test
				verify error

				java
					v_test_object_ = new fa_string_value ( "a" );
				end java
				test
				verify v_result compare =v ""~

				java
					v_test_object_ = new fa_string_value ( "ab" );
				end java
				test
				verify v_result compare =v "a"~

				java
					v_test_object_ = new fa_string_value ( "ABC" );
				end java
				test
				verify v_result compare =v "AB"~
			end
		end
	end

	command trim
		script
			java
				o_result = new fa_string_value ( java_value.trim() ) ;
			end java
		end
	end
	
	command pad_left
		script
			java
				int v_space_count = i_width.getValue().java_value() - java_value.length();
				if (v_space_count > 0) {
					o_result = new fa_string_value ( _repeat ( " ", v_space_count ) + java_value ) ;
				}
				else {
					o_result = this ;
				}
			end java
		end

		test
			script
				java
					v_test_object_ = new fa_string_value ( "abc" );
				end java

				test i_width = 5
				verify v_result compare =v "  abc"~

				test i_width = 3
				verify v_result compare =v "abc"~

				test i_width = 2
				verify error
			end
		end
	end

	command pad_right
		script
			java
				int v_space_count = i_width.getValue().java_value() - java_value.length();
				if (v_space_count > 0) {
					o_result = new fa_string_value ( java_value + _repeat ( " ", v_space_count ) ) ;
				}
				else {
					o_result = this ;
				}
			end java
		end

		test
			script
				java
					v_test_object_ = new fa_string_value ( "abc" );
				end java

				test i_width = 5
				verify v_result compare =v "abc  "~

				test i_width = 3
				verify v_result compare =v "abc"~

				test i_width = 2
				verify error
			end
		end
	end
	
	command replace_from_to
		script
			if i_from > 1 then
				o_result = extract_to ( i_from - 1 )
			else
				o_result = se_string_constants.empty_string.value
			end if

			o_result = o_result & i_replace_by
			
			if i_to < item_count then
				o_result = o_result & extract_from ( i_to + 1 )
			end if
		end
		
		test
			script
				java
					v_test_object_ = new fa_string_value ( "abcde" );
				end java

				test from = 2; to = 4; replace_by = "1234"~
				verify v_result compare =v "a1234e"~

				test from = 1; to = 3; replace_by = "1234"~
				verify v_result compare =v "1234de"~

				test from = 4; to = 5; replace_by = "1234"~
				verify v_result compare =v "abc1234"~

				test from = 1; to = 5; replace_by = "1234"~
				verify v_result compare =v "1234"~

				test from = 1; to = 1; replace_by = ""~
				verify v_result compare =v "bcde"~

				test from = 5; to = 5; replace_by = ""~
				verify v_result compare =v "abcd"~

				test from = 1; to = 6; replace_by = ""~
				verify error

				test from = 2; to = 1; replace_by = ""~
				verify error

			end
		end
	end

	command replace_all
		script
			java
				// TD3 use replace_all_regex

				// TD maybe should try this:
				// o_result = new fa_string ( java_value.replaceAll ( Pattern.quote(i_to_replace.java_value()), i_replace_by.java_value() ) ) ;
				// or use replace(CharSequence target, CharSequence replacement) (since 1.5)

				final StringBuffer v_result = new StringBuffer();
				int v_start_index = 0;
				int v_old_index = 0;

				while ((v_old_index = java_value.indexOf(i_to_replace.java_value(), v_start_index)) >= 0) {
					v_result.append ( java_value.substring ( v_start_index, v_old_index ) );
					v_result.append ( i_replace_by.java_value() );
					v_start_index = v_old_index + i_to_replace.java_value().length();
				}

				v_result.append( java_value.substring(v_start_index) );

				o_result = new fa_string_value ( v_result.toString() ) ;
			end java
		end

		test
			script
				java
					v_test_object_ = new fa_string_value ( "This is a text" );
				end java

				test i_to_replace = "a"~ i_replace_by = "one"~
				verify v_result compare =v "This is one text"~

				test i_to_replace = "text"~ i_replace_by = "?"~
				verify v_result compare =v "This is a ?"~

				test i_to_replace = "t"~ i_replace_by = "?"~
				verify v_result compare =v "This is a ?ex?"~

				test i_to_replace = "qwe"~ i_replace_by = "asd"~
				verify v_result compare =v "This is a text"~

				test i_to_replace = ""~ i_replace_by = "asd"~
				verify error
			end
		end
	end

	command replace_all_regex
		script
			java
				o_result = new fa_string_value ( java_value.replaceAll ( i_to_replace_regex.getValue().java_value(), i_replace_by.java_value() ) ) ;
			end java
		end
	end

	command truncate
		script
			if item_count <= i_width then
				o_result = this
			else
				o_result = co_extract_to ( i_width )
			end if
		end

		test
			script
				java
					v_test_object_ = new fa_string_value ( "abcde" );
				end java

				test i_width = 1
				verify v_result compare =v "a"~

				test i_width = 4
				verify v_result compare =v "abcd"~

				test i_width = 5
				verify v_result compare =v "abcde"~

				test i_width = 6
				verify v_result compare =v "abcde"~
			end
		end
	end


	// split

	command split_by_lines
		script
			o_result = co_split_by_regex ( se_regex_constants.current_OS_new_line_regex )
		end
	end
	
	command split
		script
			o_result = co_split_by_regex ( se_regex_utilities.literal_string_to_regex ( fa_simple_non_empty_string.create ( i_split_by ) ) )
		end
	end

	command split_by_regex
		script
			const !mutable_indexed_list<string_value> temp_result = !mutable_indexed_list_factory<string_value>.co_create
			java
				String[] result_array = java_value.split ( i_regex.getValue().java_value(), Integer.MAX_VALUE );
				for ( int i = 0; i < result_array.length; i++ ) {
					c_temp_result.co_append_command ( new fa_string_value ( result_array[i] ) );
				}
			end java
			o_result = temp_result.make_immutable
		end
		test
			script
				java
					v_test_object_ = new fa_string_value ( "ab&de" );
				end java

				test fa_regex.create ( "&"~ )
				verify v_result.item_count compare =v 2
				verify v_result.first_item compare =v "ab"~
				verify v_result.last_item compare =v "de"~

				java
					v_test_object_ = new fa_string_value ( "&ab&&d&" );
				end java

				test fa_regex.create ( "&"~ )
				verify v_result.item_count compare =v 5
				verify v_result.item_at_index ( 1 ) compare =v ""~
				verify v_result.item_at_index ( 2 ) compare =v "ab"~
				verify v_result.item_at_index ( 3 ) compare =v ""~
				verify v_result.item_at_index ( 4 ) compare =v "d"~
				verify v_result.item_at_index ( 5 ) compare =v ""~

				test fa_regex.create ( "@"~ )
				verify v_result.item_count compare =v 1
				verify v_result.item_at_index ( 1 ) compare =v "&ab&&d&"~
			end
		end
	end
	
	
	// transformation

	command to_lower_case
		script
			java
				o_result = new fa_string_value ( java_value.toLowerCase() ) ;
			end java
		end
	end

	command to_upper_case
		script
			java
				o_result = new fa_string_value ( java_value.toUpperCase() ) ;
			end java
		end
	end

	command to_first_upper_case
		script
			java
				o_result = new fa_string_value ( java_value.substring(0,1).toUpperCase() + java_value.substring(1)) ;
			end java
		end
	end

end factory
