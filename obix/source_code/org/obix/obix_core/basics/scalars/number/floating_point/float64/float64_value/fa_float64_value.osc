///
   Copyright (C) 2009-2012 Christian Neumanns (www.rps-obix.com)
   This code can be used under the terms of the 'GNU Afero General Public License version 3'
   The full text of this license can be found at http://www.gnu.org/licenses/agpl.html
   THIS CODE IS DISTRIBUTED WITHOUT ANY WARRANTY. See the license for details.
end ///

factory float64_value type:float64_value

	java
		private double java_value ;

		public double java_value() { return java_value; }

		public fa_float64_value ( double i_java_value ) {
			this.java_value = i_java_value ;
		}

		/*
		private in_arithmetic_overflow_error co_arithmetic_overflow_error ( String i_command_id, int value_1, int value_2 ) {
		
			return fa_arithmetic_overflow_error.co_create_with_defaults_command ( 
				fa_bug_source_code_location._co_create_java ( _a_RSE_path, _a_RSE_id, i_command_id, i_command_id + "_command", 0, null ), 
				null, 
				new fa_non_empty_string ( String.valueOf ( value_1 ) ), 
				new fa_non_empty_string ( String.valueOf ( value_2 ) ) ) ;
		}
		*/
	end java

	// extended_comparable

	command is_equal_to
		script
			java
				o_result = (this.java_value == i_other.java_value()) ? fa_yes_no.a_yes : fa_yes_no.a_no ;
			end java
		end
	end

	command compare_to
		script
			java
				if ( i_other == this ) {
					o_result = se_any_type.en_comparator_result_equal ;
				}
				else {
					o_result = ( this.java_value < i_other.java_value() ? se_any_type.en_comparator_result_less : ( this.java_value == i_other.java_value() ? se_any_type.en_comparator_result_equal : se_any_type.en_comparator_result_greater ) ) ;
				}
			end java
		end
	end

	command min
		script
			java
				o_result = (this.java_value <= i_other.java_value()) ? this : i_other ;
			end java
		end 
	end

	command max
		script
			java
				o_result = (this.java_value >= i_other.java_value()) ? this : i_other ;
			end java
		end
	end

	command is_between
		script
			java
				o_result = (this.java_value >= i_min.java_value() && this.java_value <= i_max.java_value()) ? fa_yes_no.a_yes : fa_yes_no.a_no ; ;
			end java
		end
	end

	// arithmetics

	command add
		script
			java
				o_result = new fa_float64_value ( this.java_value + i_operand.java_value() ) ;
			end java
		end
	end

	command subtract
		script
			java
				o_result = new fa_float64_value ( this.java_value - i_operand.java_value() ) ;
			end java
		end
	end

	command multiply
		script
			java
				o_result = new fa_float64_value ( this.java_value * i_operand.java_value() ) ;
			end java
		end
	end

	command divide
		script
			java
				o_result = new fa_float64_value ( this.java_value / i_operand.java_value() ) ;
			end java
		end script
	end

	command abs
		script
			java
				o_result = this.java_value >= 0.0 ? this : new fa_float64_value ( -this.java_value ) ;
			end java
		end
	end
	
	command to_string
		script
			java
				o_result = new fa_non_empty_string ( String.valueOf ( java_value ) ) ;
			end java
		end
	end
	
end factory
