///
   Copyright (C) 2009-2012 Christian Neumanns (www.rps-obix.com)
   This code can be used under the terms of the 'GNU Afero General Public License version 3'
   The full text of this license can be found at http://www.gnu.org/licenses/agpl.html
   THIS CODE IS DISTRIBUTED WITHOUT ANY WARRANTY. See the license for details.
end ///

factory yes_no_value type:yes_no_value

	// two static final values (yes and no) are shared, because objects are immutable
	// same principle as enumerated
	// different from integer, character and string
	
	java
		private boolean java_value ;

		public boolean java_value() { return java_value; }

		public static final fa_yes_no_value a_yes = new fa_yes_no_value ( true ) ;

		public static final fa_yes_no_value a_no = new fa_yes_no_value ( false ) ;

		public fa_yes_no_value ( boolean i_java_value ) {
			this.java_value = i_java_value ;
		}
	
		// necessary in order to be used in hash tables
		public int hashCode() {
			return java_value ? 1231 : 1237 ; // hash values copied from Java source code
		}
	end java
	
	// equalable

	command is_equal_to
		script
			java
				o_result = (this.java_value == i_other.java_value()) ? fa_yes_no.a_yes : fa_yes_no.a_no ;
			end java
		end

		test
			script
				verify no.co_is_equal_to(no)
				verify not (no.co_is_equal_to(yes))
				verify not (yes.co_is_equal_to(no))
				verify yes.co_is_equal_to(yes)

				verify no =v no
				verify not (no =v yes)
				verify not (yes =v no)
				verify yes =v yes

				verify not (no #v no)
				verify no #v yes
				verify yes #v no
				verify not (yes #v yes)
			end
		end
	end
	
	// booleanable

	command co_and
		script
			java
				o_result = (this.java_value && i_operand.java_value()) ? a_yes : a_no ;
			end java
		end
		
		test
			script
				verify no.co_and(no) =v no
				verify no.co_and(yes) =v no
				verify yes.co_and(no) =v no
				verify yes.co_and(yes) =v yes

				verify (no and no) =v no
				verify (no and yes) =v no
				verify (yes and no) =v no
				verify (yes and yes) =v yes
			end
		end
	end

	command co_or
		script
			java
				o_result = (this.java_value || i_operand.java_value()) ? a_yes : a_no ;
			end java
		end

		test
			script
				verify no.co_or(no) =v no
				verify no.co_or(yes) =v yes
				verify yes.co_or(no) =v yes
				verify yes.co_or(yes) =v yes

				verify (no or no) =v no
				verify (no or yes) =v yes
				verify (yes or no) =v yes
				verify (yes or yes) =v yes
			end
		end
	end
	
	command co_xor
		script
			java
				o_result = (this.java_value ^ i_operand.java_value()) ? a_yes : a_no ;
			end java
		end

		test
			script
				verify (no.co_xor(no)) =v no
				verify (no.co_xor(yes)) =v yes
				verify (yes.co_xor(no)) =v yes
				verify (yes.co_xor(yes)) =v no
			end
		end
	end
	
	command co_not
		script
			java
				o_result = this.java_value ? a_no : a_yes ;
			end java
		end

		test
			script
				verify no.co_not =v yes
				verify yes.co_not =v no

				verify (not no) =v yes
				verify (not yes) =v no
			end
		end
	end
	
	command to_string
		script
			java
				o_result = java_value ? se_string_constants.getYes() : se_string_constants.getNo() ;
			end java
		end

		test
			script
				verify no.co_to_string =v "no"
				verify yes.co_to_string =v "yes"
			end
		end
	end
	
	command to_integer
		script
			java
				o_result = java_value ? se_zero_positive32.getOne() : se_zero_positive32.getZero() ;
			end java
		end

		test
			script
				verify no.co_to_integer =v 0
				verify yes.co_to_integer =v 1
			end
		end
	end
	
	command to_character
		script
			java
				o_result = new fa_character ( java_value ? 'y' : 'n' ) ;
			end java
		end

		test
			script
				verify no.co_to_character =v 'n'
				verify yes.co_to_character =v 'y'
			end
		end
	end
	
end factory