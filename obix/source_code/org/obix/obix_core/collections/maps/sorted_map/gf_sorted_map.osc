///
   Copyright (C) 2009-2012 Christian Neumanns (www.rps-obix.com)
   This code can be used under the terms of the 'GNU Afero General Public License version 3'
   The full text of this license can be found at http://www.gnu.org/licenses/agpl.html
   THIS CODE IS DISTRIBUTED WITHOUT ANY WARRANTY. See the license for details.
end ///

generic factory sorted_map

	param key_type child_of:simple_string end
	param item_type end
	
	factory type:!gt_sorted_map<key_type:{key_type}; item_type:{item_type}>
	
		java_header
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.List;
			import java.util.SortedMap;
			import java.util.TreeMap;
			
			import org.obix.obix_core.basics.scalars.string.simple_string.in_simple_string;
			import org.obix.obix_core.collections.java.fa_java_collection_wrapper;
			import org.obix.obix_core.collections.java.fa_java_unmodifiable_list_wrapper;
		end java_header

		java
			private SortedMap < in_simple_string, in_any_type > a_map ;

			/* TD needed?
			public SortedMap < in_simple_string, in_any_type > java_map() { return Collections.unmodifiableSortedMap ( a_map ); }
			*/
		end java

		%mutable_or_immutable_map_factory_attributes
	
		%mutable_or_immutable_map_factory_commands<key_type:{key_type}; item_type:{item_type}>
		
		%mutable_or_immutable_sorted_map_factory_commands
	
		command to_string
			script
				o_result = "Sorted map containing " & a_item_count.co_to_string & " item(s)."
			end
		end
		

		creator create_empty

			out result type:!gt_sorted_map<key_type:{key_type}; item_type:{item_type}> end

			script
				java
					o_result.a_map = new TreeMap<in_simple_string, in_any_type>();
				end java
			end
		end

		creator create_singleton
			in key type:{key_type} end
			in item type:{item_type} voidable:yes end

			out result type:!gt_sorted_map<key_type:{key_type}; item_type:{item_type}> end

			script
				java
					o_result.a_map = new TreeMap<in_simple_string, in_any_type>();
					o_result.a_map.put(i_key, i_item);
				end java
			end
		end
		
		creator create_duo
			in key1 type:{key_type} end
			in item1 type:{item_type} voidable:yes end
			in key2 type:{key_type} end
			in item2 type:{item_type} voidable:yes end

			in_check check: key1.value #v key2.value end

			out result type:!gt_sorted_map<key_type:{key_type}; item_type:{item_type}> end

			script
				java
					o_result.a_map = new TreeMap<in_simple_string, in_any_type>();
					o_result.a_map.put(i_key1, i_item1);
					o_result.a_map.put(i_key2, i_item2);
				end java
			end
		end
		
		creator create_trio
			in key1 type:{key_type} end
			in item1 type:{item_type} voidable:yes end
			in key2 type:{key_type} end
			in item2 type:{item_type} voidable:yes end
			in key3 type:{key_type} end
			in item3 type:{item_type} voidable:yes end

			in_check check: key1.value #v key2.value and key1.value #v key3.value and key2.value #v key3.value end

			out result type:!gt_sorted_map<key_type:{key_type}; item_type:{item_type}> end

			script
				java
					o_result.a_map = new TreeMap<in_simple_string, in_any_type>();
					o_result.a_map.put(i_key1, i_item1);
					o_result.a_map.put(i_key2, i_item2);
					o_result.a_map.put(i_key3, i_item3);
				end java
			end
		end
		
		creator create_from_unmodifiable_sorted_java_map
			in java_map type:java_unmodifiable_sorted_map_wrapper end

			out result type:!gt_sorted_map<key_type:{key_type}; item_type:{item_type}> end

			script
				java
					o_result.a_map = i_java_map.java_map();
				end java
			end
		end
	end factory

end generic