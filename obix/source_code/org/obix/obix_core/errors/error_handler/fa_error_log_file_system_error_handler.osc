///
   Copyright (C) 2009-2012 Christian Neumanns (www.rps-obix.com)
   This code can be used under the terms of the 'GNU Afero General Public License version 3'
   The full text of this license can be found at http://www.gnu.org/licenses/agpl.html
   THIS CODE IS DISTRIBUTED WITHOUT ANY WARRANTY. See the license for details.
end ///

factory error_log_file_system_error_handler type:system_error_handler

	attribute_list private:yes
		attribute log_file type:file end
		attribute also_write_to_system_error_device type:yes_no end
		attribute panic_error_handler type:system_error_handler default:fa_system_err_system_error_handler.create end

		attribute private_error_count type:zero_positive32 default:0 kind:variable end
	end
	
	attribute error_count
		get
			script
				o_error_count = a_private_error_count
			end
		end
	end

	command handle_system_error
		script
			a_private_error_count = a_private_error_count + 1
			
			const mutable_string message = fa_mutable_string.create
			
			c_message.append_line ( "SYSTEM ERROR" )

			c_message.append ( "Time:    " )
			c_message.append_line ( se_any_type.force_object_to_string ( i_error.date_time.to_string ) )

			c_message.append ( "Message: " )
			c_message.append_line ( se_any_type.force_object_to_string ( i_error.description ) )

			c_message.append_line ( "Java stack trace:" )
			c_message.append_line ( se_any_type.force_object_to_string ( i_error.java_stack_trace.to_long_string ) )
			
			if i_error.java_exception #r void then
				c_message.append_new_line
				c_message.append_line ( "The error was initiated by the following Java exception: " )
				c_message.append_line ( se_any_type.force_object_to_string ( i_error.java_exception.to_long_string ) )
			end

			if a_also_write_to_system_error_device then
				se_system.err.write_line ( c_message.to_string )
			end if

			se_text_file_IO.append_string_to_new_or_existing_file ( &
				string = c_message.to_string &
				file = a_log_file &
				error_handler = a_panic_error_handler )
		end
	end
	
	creator create
		in log_file type:file check:i_log_file.directory.exists default:fa_relative_file.create ( "errors.log"~ ).make_absolute_file end
		in also_write_to_system_error_device type:yes_no default:no end
		
		out result type:system_error_handler end
		
		script
			o_result.log_file = i_log_file
			o_result.also_write_to_system_error_device = i_also_write_to_system_error_device
		end
	end
	
end factory
